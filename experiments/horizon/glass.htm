<!DOCTYPE html>
<html style="overflow: hidden;"><head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
		<title>Pocket Glass</title>
		<link rel="apple-touch-icon" href="http://cmweiss.appspot.com/experiments/horizon/icon57.png">
		<meta name="viewport" content="width=device-width,initial-scale = 1.0,user-scalable=no">
		<meta name="apple-mobile-web-app-capable" content="yes">
		<meta name="apple-mobile-web-app-status-bar-style" content="black">
		<link rel="stylesheet" href="add2home.css">
		<style>
		html body {
			height: 480px;
			width: 320px;
			overflow: hidden;
		}
		#angle {
			position: absolute;
			top: 0;
			left: 0;
			z-index: 10;
		}
		#i {
			position: absolute;
			top: 415px;
			left: 275px;
			z-index: 1000;
		}
		#chevron {
			z-index: 100;
			position:absolute;
			top: 0px;
			left: 10%;
			width: 80%;
		}
		#screen {
			position: absolute;
			z-index: 5;
			top: 0px;
			left: 0px;
			width: 320px;
			height:480px;
			clip: rect(0px,320px,460px,0px);
			overflow: hidden;
		}
		#frame {
			z-index: 5;
			top: 0px;
			left: 0px;
			width: 320px;
			height:480px;
			clip: rect(0px,320px,460px,0px);
			overflow: hidden;
		}
		#up {
			z-index: 6;
			position: relative;
			top: 0px;
			display: block;
			margin-left: auto;
			margin-right: auto;
			height: 21px;
		}
		#hzn {
			position: absolute;
			z-index: 0;
			top: -320px;
			left: -320px;
			width: 960px;
			height: 920px;
			overflow: hidden;
		}
		#ticks {
			z-index: 10;
			position: relative;
			top: 403px;
			height: 114px;
			display: block;
			margin-left: auto;
			margin-right: auto;
		}
		#sky {
			position: relative;
			top: 0px;
			left: 0px;
			background-color: #5b93c5;
			width: 100%;
			height: 347px;
		}
		#earth {
			background-color: #7d5233;
			width: 100%;
			height: 50%;
		}
		#dg {
			position: absolute;
			top: 240px;
			left: 0px;
			width: 320px;
			height: 240px;
			z-index: 100;
		}
		#rose {
			position: relative;
			top: 0px;
			left: 0px;
			width: 320px;
			height: 240px;
		}
		#dgAirplane {
			position: relative;
			width: 200px;
			height: 200px;
			top: 15px;
			left: 60px;
			z-index: 110;
		}
		#dgRose {
			position: relative;
			width: 200px;
			height: 200px;
			top: -190px;
			left: 60px;
			z-index: 105;
		}
		#hdgAdj {
			position: absolute;
			left: 0px;
			top: 160px;
/*			top: 0px; */
			z-index: 1000;
		}
		.knob {
			background-color: transparent;
			border: none;
			margin: 0px;
			padding: 0px;
		}
		</style>
		<script src="http://jsconsole.com/remote.js?2DC0767C-8173-47DC-B6C0-E495EAC6CF36"></script>
		<script src="http://jsconsole.com/remote.js?2DC0767C-8173-47DC-B6C0-E495EAC6CF36"></script>
		<script>
		var addToHomeConfig = {
			animationIn: 'bubble',
			animationOut: 'drop',
			startDelay: 500,
			lifespan:20000,
			expire:0,
			touchIcon:true,
		};
		</script>
		<script type="application/javascript" src="add2home.js"></script>
		<script>
		var hdgCorrection = 0;
		function e2q(alpha,beta,gamma) {  // Convert Euler angles to quaternion
			var rAlpha = alpha * Math.PI / 180;
			var rBeta = beta * Math.PI / 180;
			var rGamma = gamma * Math.PI / 180;
			var c1 = Math.cos(rAlpha / 2);
			var c2 = Math.cos(rBeta / 2);
			var c3 = Math.cos(rGamma / 2);
			var s1 = Math.sin(rAlpha / 2);
			var s2 = Math.sin(rBeta / 2);
			var s3 = Math.sin(rGamma / 2);
			var w = (c1 * c2 * c3 - s1 * s2 * s3);
			var x = (s1 * s2 * c3 + c1 * c2 * s3);
			var y = (s1 * c2 * c3 + c1 * s2 * s3);
			var z = (c1 * s2 * c3 - s1 * c2 * s3);
			
			return {w: w, x: x, y: y, z: z};
		}
		
		function e2aa(alpha,beta,gamma) {  // Convert Euler angles to axis-angle
			var rAlpha = alpha * Math.PI / 180;
			var rBeta = beta * Math.PI / 180;
			var rGamma = gamma * Math.PI / 180;
			var c1 = Math.cos(rAlpha / 2);
			var c2 = Math.cos(rBeta / 2);
			var c3 = Math.cos(rGamma / 2);
			var s1 = Math.sin(rAlpha / 2);
			var s2 = Math.sin(rBeta / 2);
			var s3 = Math.sin(rGamma / 2);
			var a = (2 * Math.acos(c1 * c2 * c3 - s1 * s2 * s3)) * 180 / Math.PI;
			var x = (s1 * s2 * c3 + c1 * c2 * s3);
			var y = (s1 * c2 * c3 + c1 * s2 * s3);
			var z = (c1 * s2 * c3 - s1 * c2 * s3);
			var norm = Math.sqrt(x * x + y * y + z * z);
			x /= norm;
			y /= norm;
			z /= norm;
			return {a: a, x: x, y: y, z: z};
		}
		
		function quatMultiply (q1, q2) {  // Multiply quaternions
			w = (q1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z)
			x = (q1.w * q2.x + q1.x * q2.w + q1.y * q2.z - q1.z * q2.y)
			y = (q1.w * q2.y - q1.x * q2.z + q1.y * q2.w + q1.z * q2.x)
			z = (q1.w * q2.z + q1.x * q2.y - q1.y * q2.x + q1.z * q2.w)
			return {w: w, x: x, y: y, z: z}
		}
		
		function q2e(w,x,y,z) {  // Quaternion to Euler angles
			var heading = Math.atan2(2 * y * w - 2 * x * z, 1 - 2 * (y * y) - 2 * (z * z)) * 180 / Math.PI;
			var attitude = Math.asin(2 * x * y + 2 * z * w) * 180 / Math.PI;
			var bank = Math.atan2(2 * x * w - 2 * y * z, 1 - 2 * (x * x) - 2 * (z * z)) * 180 / Math.PI;
			
			return {heading: heading, attitude: attitude, bank: bank};
		}

		var hdgAdj = {
			firstLoop: true,
			timer: null,
			start: function (dir) {
				hdgAdj.stop();
				// console.log("About to start timer.");
				hdgAdj.timer = setInterval(function() {
					if (hdgAdj.firstLoop) {
						// console.log("Timer started for: " + dir);
						hdgAdj.firstLoop = false;
					}
					window.hdgCorrection += (dir === "left" ? -1 : 1);
					document.getElementById("adj").innerHTML=window.hdgCorrection;
					updateDisplay();
				}, 50)},
			stop: function () {
				hdgAdj.firstLoop = true;
				// console.log("Clearing timer: " + hdgAdj.timer);
				clearInterval(hdgAdj.timer);
			}
		}
		function updateDisplay() {
			var quat = e2q(alpha,beta,gamma);
			var nQ = quatMultiply(quat, rQ);
			var o = q2e(nQ.w,nQ.x,nQ.y,nQ.z);
			
		
//			attitude = beta - 90;
//			document.getElementById("angle").innerHTML = o.attitude.toFixed(1) + "&deg;<br/>i";
			document.getElementById("frame").style.webkitTransform = "rotate(" + (-o.bank) + "deg)";
			document.getElementById("hzn").style.top = (o.attitude * (240/90)) - 320 + "px";
			
			document.getElementById("dgRose").style.webkitTransform = "rotate(" + (o.heading + hdgCorrection.valueOf()) + "deg)";
			document.getElementById("hdg").innerHTML = o.heading.toFixed(0);
			document.getElementById("adjhdg").innerHTML = (o.heading + hdgCorrection.valueOf()).toFixed(0);
		};

		</script>

	</head>
	<body>
		<div id="screen">
			<div id="i"><a href="about.htm"><img src="infobutton-br.svg"/></a></div>
			<div id="angle">b</div>
			<img src="ChevronArc.svg" id="chevron"/>
			<div id="pitchframe">

				<div id="frame">
					<img src="UpMark.svg" id="up"/>
					<div style="top: -240px;" id="hzn">
						<img src="AttitudeTicks.svg" id="ticks"/>
						<div id="sky"></div>
						<div id="earth"></div>
					</div>
				</div>
			</div>

			<div id="dg">
				<img id="dgAirplane" src="dgAirplane.svg"/>
				<div id="rose">
					<img id="dgRose" src="dgRose.svg"/>
				</div>
				<span id="hdgAdj"><button type="button" id="hdgAdjLeft" class="knob"><img src="adjLeft.svg"/></button><button type="button" id="hdgAdjRight" class="knob"><img src="adjRight.svg"/></button></span>
				<div style="position: absolute; top: 200px; left: 0px; background: white; display: none;">Hdg: <span id="hdg"></span> Adj: <span id="adj"></span> AdjHdg: <span id="adjhdg"></span></div>
			</div>
		</div>
		<script>
		var delay = 10;
		var alpha = 0;
		var beta = 90;
		var gamma = 0;
		var attitude = 0;
		var supportsTouch = 'createTouch' in document; // evaluates to true if the device supports touch events
		var startEvent = supportsTouch ? "ontouchstart" : "onmousedown";
		var stopEvent = supportsTouch ? "ontouchend" : "onmouseup";

		// rQ is the quaternion about which the native frame of reference will be rotated.
		var rQ = {w: Math.sqrt(0.5), x: 0, y: 0, z: -Math.sqrt(0.5)};

		// Left heading adjust
		document.getElementById("hdgAdjLeft")[startEvent]=function() {
			hdgAdj.start('left');
		};
		document.getElementById("hdgAdjLeft")[stopEvent]=hdgAdj.stop;
		if (!supportsTouch) document.getElementById("hdgAdjLeft").onmouseout=hdgAdj.stop;

		// Right heading adjust
		document.getElementById("hdgAdjRight")[startEvent]=function() {
			hdgAdj.start('right');
		};
		document.getElementById("hdgAdjRight")[stopEvent]=hdgAdj.stop;
		if (!supportsTouch) document.getElementById("hdgAdjRight").onmouseout=hdgAdj.stop;

		window.ondeviceorientation = function(event) {
			alpha = event.alpha;
			beta = event.beta;
			gamma = event.gamma;
			
			updateDisplay();
		}
		</script>

	

</body></html>
